/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/projects": {
    /**
     * List all projects 
     * @description Returns a list of all projects you've previously created.
     */
    get: operations["getProjects"];
    /** Create a project */
    post: operations["createProject"];
  };
  "/v1/organizations": {
    /**
     * List all organizations 
     * @description Returns a list of organizations that you currently belong to.
     */
    get: operations["getOrganizations"];
    /** Create an organization */
    post: operations["createOrganization"];
  };
  "/v1/oauth/authorize": {
    /** Authorize user through oauth */
    get: operations["authorize"];
  };
  "/v1/oauth/token": {
    /** Exchange auth code for user's access and refresh token */
    post: operations["token"];
  };
  "/v1/oauth/authorizations/{id}": {
    get: operations["getAuthorizationRequest"];
    /** Approve oauth app authorization request */
    post: operations["approveAuthorizationRequest"];
    /** Decline oauth app authorization request */
    delete: operations["declineAuthorizationRequest"];
  };
  "/v1/projects/{ref}/functions": {
    /**
     * List all functions 
     * @description Returns all functions you've previously added to the specified project.
     */
    get: operations["getFunctions"];
    /**
     * Create a function 
     * @description Creates a function and adds it to the specified project.
     */
    post: operations["createFunction"];
  };
  "/v1/projects/{ref}/functions/{function_slug}": {
    /**
     * Retrieve a function 
     * @description Retrieves a function with the specified slug and project.
     */
    get: operations["getFunction"];
    /**
     * Delete a function 
     * @description Deletes a function with the specified slug from the specified project.
     */
    delete: operations["deleteFunction"];
    /**
     * Update a function 
     * @description Updates a function with the specified slug and project.
     */
    patch: operations["updateFunction"];
  };
  "/v1/projects/{ref}/functions/{function_slug}/body": {
    /**
     * Retrieve a function body 
     * @description Retrieves a function body for the specified slug and project.
     */
    get: operations["getFunctionBody"];
  };
  "/v1/projects/{ref}/api-keys": {
    get: operations["getProjectApiKeys"];
  };
  "/v1/projects/{ref}/custom-hostname": {
    /** Gets project's custom hostname config */
    get: operations["getCustomHostnameConfig"];
    /** Deletes a project's custom hostname configuration */
    delete: operations["removeCustomHostnameConfig"];
  };
  "/v1/projects/{ref}/custom-hostname/initialize": {
    /** Updates project's custom hostname configuration */
    post: operations["createCustomHostnameConfig"];
  };
  "/v1/projects/{ref}/custom-hostname/reverify": {
    /** Attempts to verify the DNS configuration for project's custom hostname configuration */
    post: operations["reverify"];
  };
  "/v1/projects/{ref}/custom-hostname/activate": {
    /** Activates a custom hostname for a project. */
    post: operations["activate"];
  };
  "/v1/projects/{ref}/network-bans/retrieve": {
    /** Gets project's network bans */
    post: operations["getNetworkBans"];
  };
  "/v1/projects/{ref}/network-bans": {
    /** Remove network bans. */
    delete: operations["removeNetworkBan"];
  };
  "/v1/projects/{ref}/network-restrictions": {
    /** Gets project's network restrictions */
    get: operations["getNetworkRestrictions"];
  };
  "/v1/projects/{ref}/network-restrictions/apply": {
    /** Updates project's network restrictions */
    post: operations["applyNetworkRestrictions"];
  };
  "/v1/projects/{ref}/pgsodium": {
    /** Gets project's pgsodium config */
    get: operations["getPgsodiumConfig"];
    /** Updates project's pgsodium config. Updating the root_key can cause all data encrypted with the older key to become inaccessible. */
    put: operations["updatePgsodiumConfig"];
  };
  "/v1/projects/{ref}/postgrest": {
    /** Gets project's postgrest config */
    get: operations["getPostgRESTConfig"];
    /** Updates project's postgrest config */
    patch: operations["updatePostgRESTConfig"];
  };
  "/v1/projects/{ref}/query": {
    /** Run sql query */
    post: operations["runQuery"];
  };
  "/v1/projects/{ref}/secrets": {
    /**
     * List all secrets 
     * @description Returns all secrets you've previously added to the specified project.
     */
    get: operations["getSecrets"];
    /**
     * Bulk create secrets 
     * @description Creates multiple secrets and adds them to the specified project.
     */
    post: operations["createSecrets"];
    /**
     * Bulk delete secrets 
     * @description Deletes all secrets with the given names from the specified project
     */
    delete: operations["deleteSecrets"];
  };
  "/v1/projects/{ref}/ssl-enforcement": {
    /** Get project's SSL enforcement configuration. */
    get: operations["getSslEnforcementConfig"];
    /** Update project's SSL enforcement configuration. */
    put: operations["updateSslEnforcementConfig"];
  };
  "/v1/projects/{ref}/types/typescript": {
    /**
     * Generate TypeScript types 
     * @description Returns the TypeScript types of your schema for use with supabase-js.
     */
    get: operations["getTypescriptTypes"];
  };
  "/v1/projects/{ref}/vanity-subdomain": {
    /** Gets current vanity subdomain config */
    get: operations["getVanitySubdomainConfig"];
    /** Deletes a project's vanity subdomain configuration */
    delete: operations["removeVanitySubdomainConfig"];
  };
  "/v1/projects/{ref}/vanity-subdomain/check-availability": {
    /** Checks vanity subdomain availability */
    post: operations["checkVanitySubdomainAvailability"];
  };
  "/v1/projects/{ref}/vanity-subdomain/activate": {
    /** Activates a vanity subdomain for a project. */
    post: operations["activateVanitySubdomainPlease"];
  };
  "/v1/projects/{ref}/upgrade": {
    /** Upgrades the project's Postgres version */
    post: operations["upgradeProject"];
  };
  "/v1/projects/{ref}/upgrade/eligibility": {
    /** Returns the project's eligibility for upgrades */
    get: operations["upgradeEligibilityInformation"];
  };
  "/v1/projects/{ref}/upgrade/status": {
    /** Gets the latest status of the project's upgrade */
    get: operations["getUpgradeStatus"];
  };
  "/v1/projects/{ref}/readonly": {
    /** Returns project's readonly mode status */
    get: operations["getReadOnlyModeStatus"];
  };
  "/v1/projects/{ref}/readonly/temporary-disable": {
    /** Disables project's readonly mode for the next 15 minutes */
    post: operations["temporarilyDisableReadonlyMode"];
  };
  "/v1/projects/{ref}/config/database/postgres": {
    /** Gets project's Postgres config */
    get: operations["getConfig"];
    /** Updates project's Postgres config */
    put: operations["updateConfig"];
  };
  "/v1/projects/{ref}/config/database/pgbouncer": {
    /** Gets project's pgbouncer config */
    get: operations["getPgbouncerConfig"];
    /** Updates project's pgbouncer config */
    patch: operations["updatePgbouncerConfig"];
  };
  "/v1/projects/{ref}/config/auth/sso/providers": {
    /** Lists all SSO providers */
    get: operations["listAllProviders"];
    /** Creates a new SSO provider */
    post: operations["createProviderForProject"];
  };
  "/v1/projects/{ref}/config/auth/sso/providers/{provider_id}": {
    /** Gets a SSO provider by its UUID */
    get: operations["getProviderById"];
    /** Updates a SSO provider by its UUID */
    put: operations["updateProviderById"];
    /** Removes a SSO provider by its UUID */
    delete: operations["removeProviderById"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    DatabaseResponse: {
      /** @description Database host */
      host: string;
      /** @description Database version */
      version: string;
    };
    ProjectResponse: {
      /** @description Id of your project */
      id: string;
      /** @description Slug of your organization */
      organization_id: string;
      /** @description Name of your project */
      name: string;
      /**
       * @description Region of your project 
       * @example us-east-1
       */
      region: string;
      /**
       * @description Creation timestamp 
       * @example 2023-03-29T16:32:59Z
       */
      created_at: string;
      database?: components["schemas"]["DatabaseResponse"];
    };
    CreateProjectBody: {
      /** @description Database password */
      db_pass: string;
      /** @description Name of your project, should not contain dots */
      name: string;
      /** @description Slug of your organization */
      organization_id: string;
      /**
       * @description Subscription plan 
       * @example free 
       * @enum {string}
       */
      plan: "free" | "pro";
      /**
       * @description Region you want your server to reside in 
       * @example us-east-1 
       * @enum {string}
       */
      region: "us-east-1" | "us-west-1" | "us-west-2" | "ap-southeast-1" | "ap-northeast-1" | "ap-northeast-2" | "ap-southeast-2" | "eu-west-1" | "eu-west-2" | "eu-west-3" | "eu-central-1" | "ca-central-1" | "ap-south-1" | "sa-east-1";
      kps_enabled?: boolean;
    };
    OrganizationResponse: {
      id: string;
      name: string;
    };
    CreateOrganizationBody: {
      name: string;
    };
    AuthorizationsApproveBody: {
      organization_id: string;
    };
    CreateFunctionBody: {
      slug: string;
      name: string;
      body: string;
      verify_jwt?: boolean;
    };
    FunctionResponse: {
      id: string;
      slug: string;
      name: string;
      /** @enum {string} */
      status: "ACTIVE" | "REMOVED" | "THROTTLED";
      version: number;
      created_at: number;
      updated_at: number;
      verify_jwt?: boolean;
      import_map?: boolean;
      entrypoint_path?: string;
      import_map_path?: string;
    };
    FunctionSlugResponse: {
      id: string;
      slug: string;
      name: string;
      /** @enum {string} */
      status: "ACTIVE" | "REMOVED" | "THROTTLED";
      version: number;
      created_at: number;
      updated_at: number;
      verify_jwt?: boolean;
      import_map?: boolean;
      entrypoint_path?: string;
      import_map_path?: string;
    };
    UpdateFunctionBody: {
      name?: string;
      body?: string;
      verify_jwt?: boolean;
    };
    ApiKeyResponse: {
      name: string;
      api_key: string;
    };
    UpdateCustomHostnameResponse: {
      /** @enum {string} */
      status: "1_not_started" | "2_initiated" | "3_challenge_verified" | "4_origin_setup_completed" | "5_services_reconfigured";
      custom_hostname: string;
      data: Record<string, never>;
    };
    UpdateCustomHostnameBody: {
      custom_hostname: string;
    };
    NetworkBanResponse: {
      banned_ipv4_addresses: (string)[];
    };
    RemoveNetworkBanRequest: {
      ipv4_addresses: (string)[];
    };
    NetworkRestrictionsRequest: {
      dbAllowedCidrs: (string)[];
    };
    NetworkRestrictionsResponse: {
      /** @enum {string} */
      entitlement: "disallowed" | "allowed";
      config: components["schemas"]["NetworkRestrictionsRequest"];
      old_config?: components["schemas"]["NetworkRestrictionsRequest"];
      /** @enum {string} */
      status: "stored" | "applied";
    };
    PgsodiumConfigResponse: {
      root_key: string;
    };
    UpdatePgsodiumConfigBody: {
      root_key: string;
    };
    PostgrestConfigWithJWTSecretResponse: {
      max_rows: number;
      db_schema: string;
      db_extra_search_path: string;
      jwt_secret?: string;
    };
    UpdatePostgrestConfigBody: {
      max_rows?: number;
      db_extra_search_path?: string;
      db_schema?: string;
    };
    PostgrestConfigResponse: {
      max_rows: number;
      db_schema: string;
      db_extra_search_path: string;
    };
    RunQueryBody: {
      query: string;
    };
    SecretResponse: {
      name: string;
      value: string;
    };
    CreateSecretBody: {
      name: string;
      value: string;
    };
    SslEnforcements: {
      database: boolean;
    };
    SslEnforcementResponse: {
      currentConfig: components["schemas"]["SslEnforcements"];
      appliedSuccessfully: boolean;
    };
    SslEnforcementRequest: {
      requestedConfig: components["schemas"]["SslEnforcements"];
    };
    TypescriptResponse: {
      types: string;
    };
    VanitySubdomainConfigResponse: {
      /** @enum {string} */
      status: "not-used" | "custom-domain-used" | "active";
      custom_domain?: string;
    };
    VanitySubdomainBody: {
      vanity_subdomain: string;
    };
    SubdomainAvailabilityResponse: {
      available: boolean;
    };
    ActivateVanitySubdomainResponse: {
      custom_domain: string;
    };
    UpgradeDatabaseBody: {
      target_version: number;
    };
    ProjectVersion: {
      postgres_version: number;
      app_version: string;
    };
    ProjectUpgradeEligibilityResponse: {
      eligible: boolean;
      current_app_version: string;
      latest_app_version: string;
      target_upgrade_versions: (components["schemas"]["ProjectVersion"])[];
      requires_manual_intervention: string | null;
      potential_breaking_changes: (string)[];
    };
    DatabaseUpgradeStatus: {
      initiated_at: string;
      target_version: number;
      /** @enum {string} */
      error?: "1_upgraded_instance_launch_failed" | "2_volume_detachchment_from_upgraded_instance_failed" | "3_volume_attachment_to_original_instance_failed" | "4_data_upgrade_initiation_failed" | "5_data_upgrade_completion_failed" | "6_volume_detachchment_from_original_instance_failed" | "7_volume_attachment_to_upgraded_instance_failed" | "8_upgrade_completion_failed";
      /** @enum {string} */
      progress?: "1_started" | "2_launched_upgraded_instance" | "3_detached_volume_from_upgraded_instance" | "4_attached_volume_to_original_instance" | "5_initiated_data_upgrade" | "6_completed_data_upgrade" | "7_detached_volume_from_original_instance" | "8_attached_volume_to_upgraded_instance" | "9_completed_upgrade";
      /** @enum {number} */
      status: 0 | 1 | 2;
    };
    DatabaseUpgradeStatusResponse: {
      databaseUpgradeStatus: components["schemas"]["DatabaseUpgradeStatus"] | null;
    };
    ReadOnlyStatusResponse: {
      enabled: boolean;
      override_enabled: boolean;
      override_active_until: string;
    };
    PostgresConfigResponse: {
      statement_timeout?: string;
      effective_cache_size?: string;
      maintenance_work_mem?: string;
      max_connections?: number;
      max_parallel_maintenance_workers?: number;
      max_parallel_workers?: number;
      max_parallel_workers_per_gather?: number;
      max_worker_processes?: number;
      shared_buffers?: string;
      work_mem?: string;
      /** @enum {string} */
      session_replication_role?: "origin" | "replica" | "local";
    };
    UpdatePostgresConfigBody: {
      statement_timeout?: string;
      effective_cache_size?: string;
      maintenance_work_mem?: string;
      max_connections?: number;
      max_parallel_maintenance_workers?: number;
      max_parallel_workers?: number;
      max_parallel_workers_per_gather?: number;
      max_worker_processes?: number;
      shared_buffers?: string;
      work_mem?: string;
      /** @enum {string} */
      session_replication_role?: "origin" | "replica" | "local";
    };
    ProjectPgBouncerConfig: {
      db_dns_name: string;
      db_host: string;
      db_name: string;
      db_port: number;
      db_ssl: boolean;
      db_user: string;
      default_pool_size?: number;
      ignore_startup_parameters: string;
      inserted_at: string;
      pgbouncer_enabled: boolean;
      /** @enum {string} */
      pgbouncer_status: "COMING_DOWN" | "COMING_UP" | "DISABLED" | "ENABLED" | "RELOADING";
      /** @enum {string} */
      pool_mode: "transaction" | "session" | "statement";
      max_client_conn?: number | null;
    };
    UpdatePgbouncerConfigBody: {
      default_pool_size?: number;
      max_client_conn?: number | null;
      ignore_startup_parameters: string;
      pgbouncer_enabled: boolean;
      /** @enum {string} */
      pool_mode: "transaction" | "session" | "statement";
    };
    UpdatePoolingConfigResponse: {
      default_pool_size?: number;
      max_client_conn?: number | null;
      ignore_startup_parameters: string;
      pgbouncer_enabled: boolean;
      /** @enum {string} */
      pool_mode: "transaction" | "session" | "statement";
      /** @enum {string} */
      pgbouncer_status: "COMING_DOWN" | "COMING_UP" | "DISABLED" | "ENABLED" | "RELOADING";
    };
    AttributeValue: {
      default?: Record<string, never> | number | string | boolean;
      name?: string;
      names?: (string)[];
    };
    AttributeMapping: {
      keys: {
        [key: string]: components["schemas"]["AttributeValue"] | undefined;
      };
    };
    CreateProviderBody: {
      /**
       * @description What type of provider will be created 
       * @enum {string}
       */
      type: "saml";
      metadata_xml?: string;
      metadata_url?: string;
      domains?: (string)[];
      attribute_mapping?: components["schemas"]["AttributeMapping"];
    };
    SamlDescriptor: {
      id: string;
      entity_id: string;
      metadata_url?: string;
      metadata_xml?: string;
      attribute_mapping?: components["schemas"]["AttributeMapping"];
    };
    Domain: {
      id: string;
      domain?: string;
      created_at?: string;
      updated_at?: string;
    };
    CreateProviderResponse: {
      id: string;
      saml?: components["schemas"]["SamlDescriptor"];
      domains?: (components["schemas"]["Domain"])[];
      created_at?: string;
      updated_at?: string;
    };
    Provider: {
      id: string;
      saml?: components["schemas"]["SamlDescriptor"];
      domains?: (components["schemas"]["Domain"])[];
      created_at?: string;
      updated_at?: string;
    };
    ListProvidersResponse: {
      items: (components["schemas"]["Provider"])[];
    };
    GetProviderResponse: {
      id: string;
      saml?: components["schemas"]["SamlDescriptor"];
      domains?: (components["schemas"]["Domain"])[];
      created_at?: string;
      updated_at?: string;
    };
    UpdateProviderBody: {
      metadata_xml?: string;
      metadata_url?: string;
      domains?: (string)[];
      attribute_mapping?: components["schemas"]["AttributeMapping"];
    };
    UpdateProviderResponse: {
      id: string;
      saml?: components["schemas"]["SamlDescriptor"];
      domains?: (components["schemas"]["Domain"])[];
      created_at?: string;
      updated_at?: string;
    };
    DeleteProviderResponse: {
      id: string;
      saml?: components["schemas"]["SamlDescriptor"];
      domains?: (components["schemas"]["Domain"])[];
      created_at?: string;
      updated_at?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * List all projects 
   * @description Returns a list of all projects you've previously created.
   */
  getProjects: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["ProjectResponse"])[];
        };
      };
    };
  };
  /** Create a project */
  createProject: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProjectBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProjectResponse"];
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["ProjectResponse"];
        };
      };
    };
  };
  /**
   * List all organizations 
   * @description Returns a list of organizations that you currently belong to.
   */
  getOrganizations: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["OrganizationResponse"])[];
        };
      };
      /** @description Unexpected error listing organizations */
      500: never;
    };
  };
  /** Create an organization */
  createOrganization: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOrganizationBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["OrganizationResponse"];
        };
      };
      /** @description Unexpected error creating an organization */
      500: never;
    };
  };
  /** Authorize user through oauth */
  authorize: {
    parameters: {
      query: {
        client_id: string;
        response_type: "code" | "token" | "id_token token";
        redirect_uri: string;
        scope: string;
        state?: string;
        response_mode?: string;
        code_challenge?: string;
        code_challenge_method?: "plain" | "sha256";
      };
    };
    responses: {
      200: never;
    };
  };
  /** Exchange auth code for user's access and refresh token */
  token: {
    parameters: {
      query: {
        grant_type: "authorization_code" | "refresh_token";
        client_id: string;
        client_secret: string;
        code?: string;
        code_verifier?: string;
        redirect_uri?: string;
        refresh_token?: string;
      };
    };
    responses: {
      201: never;
    };
  };
  getAuthorizationRequest: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: never;
    };
  };
  /** Approve oauth app authorization request */
  approveAuthorizationRequest: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthorizationsApproveBody"];
      };
    };
    responses: {
      201: never;
    };
  };
  /** Decline oauth app authorization request */
  declineAuthorizationRequest: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: never;
    };
  };
  /**
   * List all functions 
   * @description Returns all functions you've previously added to the specified project.
   */
  getFunctions: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["FunctionResponse"])[];
        };
      };
      403: never;
      /** @description Failed to retrieve project's functions */
      500: never;
    };
  };
  /**
   * Create a function 
   * @description Creates a function and adds it to the specified project.
   */
  createFunction: {
    parameters: {
      query?: {
        slug?: string;
        name?: string;
        verify_jwt?: boolean;
        import_map?: boolean;
        entrypoint_path?: string;
        import_map_path?: string;
      };
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFunctionBody"];
        "application/vnd.denoland.eszip": components["schemas"]["CreateFunctionBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["FunctionResponse"];
        };
      };
      403: never;
      /** @description Failed to create project's function */
      500: never;
    };
  };
  /**
   * Retrieve a function 
   * @description Retrieves a function with the specified slug and project.
   */
  getFunction: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
        /** @description Function slug */
        function_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FunctionSlugResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve function with given slug */
      500: never;
    };
  };
  /**
   * Delete a function 
   * @description Deletes a function with the specified slug from the specified project.
   */
  deleteFunction: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
        /** @description Function slug */
        function_slug: string;
      };
    };
    responses: {
      200: never;
      403: never;
      /** @description Failed to delete function with given slug */
      500: never;
    };
  };
  /**
   * Update a function 
   * @description Updates a function with the specified slug and project.
   */
  updateFunction: {
    parameters: {
      query?: {
        slug?: string;
        name?: string;
        verify_jwt?: boolean;
        import_map?: boolean;
        entrypoint_path?: string;
        import_map_path?: string;
      };
      path: {
        /** @description Project ref */
        ref: string;
        /** @description Function slug */
        function_slug: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateFunctionBody"];
        "application/vnd.denoland.eszip": components["schemas"]["UpdateFunctionBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FunctionResponse"];
        };
      };
      403: never;
      /** @description Failed to update function with given slug */
      500: never;
    };
  };
  /**
   * Retrieve a function body 
   * @description Retrieves a function body for the specified slug and project.
   */
  getFunctionBody: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
        /** @description Function slug */
        function_slug: string;
      };
    };
    responses: {
      200: never;
      403: never;
      /** @description Failed to retrieve function body with given slug */
      500: never;
    };
  };
  getProjectApiKeys: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["ApiKeyResponse"])[];
        };
      };
      403: never;
    };
  };
  /** Gets project's custom hostname config */
  getCustomHostnameConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UpdateCustomHostnameResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project's custom hostname config */
      500: never;
    };
  };
  /** Deletes a project's custom hostname configuration */
  removeCustomHostnameConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: never;
      403: never;
      /** @description Failed to delete project custom hostname configuration */
      500: never;
    };
  };
  /** Updates project's custom hostname configuration */
  createCustomHostnameConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCustomHostnameBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UpdateCustomHostnameResponse"];
        };
      };
      403: never;
      /** @description Failed to update project custom hostname configuration */
      500: never;
    };
  };
  /** Attempts to verify the DNS configuration for project's custom hostname configuration */
  reverify: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UpdateCustomHostnameResponse"];
        };
      };
      403: never;
      /** @description Failed to verify project custom hostname configuration */
      500: never;
    };
  };
  /** Activates a custom hostname for a project. */
  activate: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UpdateCustomHostnameResponse"];
        };
      };
      403: never;
      /** @description Failed to activate project custom hostname configuration */
      500: never;
    };
  };
  /** Gets project's network bans */
  getNetworkBans: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["NetworkBanResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project's network bans */
      500: never;
    };
  };
  /** Remove network bans. */
  removeNetworkBan: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RemoveNetworkBanRequest"];
      };
    };
    responses: {
      200: never;
      403: never;
      /** @description Failed to remove network bans. */
      500: never;
    };
  };
  /** Gets project's network restrictions */
  getNetworkRestrictions: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["NetworkRestrictionsResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project's network restrictions */
      500: never;
    };
  };
  /** Updates project's network restrictions */
  applyNetworkRestrictions: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NetworkRestrictionsRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["NetworkRestrictionsResponse"];
        };
      };
      403: never;
      /** @description Failed to update project network restrictions */
      500: never;
    };
  };
  /** Gets project's pgsodium config */
  getPgsodiumConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PgsodiumConfigResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project's pgsodium config */
      500: never;
    };
  };
  /** Updates project's pgsodium config. Updating the root_key can cause all data encrypted with the older key to become inaccessible. */
  updatePgsodiumConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePgsodiumConfigBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PgsodiumConfigResponse"];
        };
      };
      403: never;
      /** @description Failed to update project's pgsodium config */
      500: never;
    };
  };
  /** Gets project's postgrest config */
  getPostgRESTConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PostgrestConfigWithJWTSecretResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project's postgrest config */
      500: never;
    };
  };
  /** Updates project's postgrest config */
  updatePostgRESTConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePostgrestConfigBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PostgrestConfigResponse"];
        };
      };
      403: never;
      /** @description Failed to update project's postgrest config */
      500: never;
    };
  };
  /** Run sql query */
  runQuery: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RunQueryBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      403: never;
      /** @description Failed to run sql query */
      500: never;
    };
  };
  /**
   * List all secrets 
   * @description Returns all secrets you've previously added to the specified project.
   */
  getSecrets: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["SecretResponse"])[];
        };
      };
      403: never;
      /** @description Failed to retrieve project's secrets */
      500: never;
    };
  };
  /**
   * Bulk create secrets 
   * @description Creates multiple secrets and adds them to the specified project.
   */
  createSecrets: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": (components["schemas"]["CreateSecretBody"])[];
      };
    };
    responses: {
      201: never;
      403: never;
      /** @description Failed to create project's secrets */
      500: never;
    };
  };
  /**
   * Bulk delete secrets 
   * @description Deletes all secrets with the given names from the specified project
   */
  deleteSecrets: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": (string)[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      403: never;
      /** @description Failed to delete secrets with given names */
      500: never;
    };
  };
  /** Get project's SSL enforcement configuration. */
  getSslEnforcementConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SslEnforcementResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project's SSL enforcement config */
      500: never;
    };
  };
  /** Update project's SSL enforcement configuration. */
  updateSslEnforcementConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SslEnforcementRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SslEnforcementResponse"];
        };
      };
      403: never;
      /** @description Failed to update project's SSL enforcement configuration. */
      500: never;
    };
  };
  /**
   * Generate TypeScript types 
   * @description Returns the TypeScript types of your schema for use with supabase-js.
   */
  getTypescriptTypes: {
    parameters: {
      query?: {
        included_schemas?: string;
      };
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TypescriptResponse"];
        };
      };
      403: never;
      /** @description Failed to generate TypeScript types */
      500: never;
    };
  };
  /** Gets current vanity subdomain config */
  getVanitySubdomainConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["VanitySubdomainConfigResponse"];
        };
      };
      403: never;
      /** @description Failed to get project vanity subdomain configuration */
      500: never;
    };
  };
  /** Deletes a project's vanity subdomain configuration */
  removeVanitySubdomainConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: never;
      403: never;
      /** @description Failed to delete project vanity subdomain configuration */
      500: never;
    };
  };
  /** Checks vanity subdomain availability */
  checkVanitySubdomainAvailability: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VanitySubdomainBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SubdomainAvailabilityResponse"];
        };
      };
      403: never;
      /** @description Failed to check project vanity subdomain configuration */
      500: never;
    };
  };
  /** Activates a vanity subdomain for a project. */
  activateVanitySubdomainPlease: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VanitySubdomainBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ActivateVanitySubdomainResponse"];
        };
      };
      403: never;
      /** @description Failed to activate project vanity subdomain configuration */
      500: never;
    };
  };
  /** Upgrades the project's Postgres version */
  upgradeProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpgradeDatabaseBody"];
      };
    };
    responses: {
      201: never;
      403: never;
      /** @description Failed to initiate project upgrade */
      500: never;
    };
  };
  /** Returns the project's eligibility for upgrades */
  upgradeEligibilityInformation: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProjectUpgradeEligibilityResponse"];
        };
      };
      403: never;
      /** @description Failed to determine project upgrade eligibility */
      500: never;
    };
  };
  /** Gets the latest status of the project's upgrade */
  getUpgradeStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DatabaseUpgradeStatusResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project upgrade status */
      500: never;
    };
  };
  /** Returns project's readonly mode status */
  getReadOnlyModeStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ReadOnlyStatusResponse"];
        };
      };
      /** @description Failed to get project readonly mode status */
      500: never;
    };
  };
  /** Disables project's readonly mode for the next 15 minutes */
  temporarilyDisableReadonlyMode: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      201: never;
      /** @description Failed to disable project's readonly mode */
      500: never;
    };
  };
  /** Gets project's Postgres config */
  getConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PostgresConfigResponse"];
        };
      };
      /** @description Failed to retrieve project's Postgres config */
      500: never;
    };
  };
  /** Updates project's Postgres config */
  updateConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePostgresConfigBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PostgresConfigResponse"];
        };
      };
      /** @description Failed to update project's Postgres config */
      500: never;
    };
  };
  /** Gets project's pgbouncer config */
  getPgbouncerConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProjectPgBouncerConfig"];
        };
      };
      /** @description Failed to retrieve project's pgbouncer config */
      500: never;
    };
  };
  /** Updates project's pgbouncer config */
  updatePgbouncerConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePgbouncerConfigBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UpdatePoolingConfigResponse"];
        };
      };
      403: never;
      /** @description Failed to update project's pgbouncer config */
      500: never;
    };
  };
  /** Lists all SSO providers */
  listAllProviders: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ListProvidersResponse"];
        };
      };
      403: never;
      /** @description SAML 2.0 support is not enabled for this project */
      404: never;
    };
  };
  /** Creates a new SSO provider */
  createProviderForProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProviderBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateProviderResponse"];
        };
      };
      403: never;
      /** @description SAML 2.0 support is not enabled for this project */
      404: never;
    };
  };
  /** Gets a SSO provider by its UUID */
  getProviderById: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
        provider_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetProviderResponse"];
        };
      };
      403: never;
      /** @description Either SAML 2.0 was not enabled for this project, or the provider does not exist */
      404: never;
    };
  };
  /** Updates a SSO provider by its UUID */
  updateProviderById: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
        provider_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProviderBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UpdateProviderResponse"];
        };
      };
      403: never;
      /** @description Either SAML 2.0 was not enabled for this project, or the provider does not exist */
      404: never;
    };
  };
  /** Removes a SSO provider by its UUID */
  removeProviderById: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
        provider_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DeleteProviderResponse"];
        };
      };
      403: never;
      /** @description Either SAML 2.0 was not enabled for this project, or the provider does not exist */
      404: never;
    };
  };
}
